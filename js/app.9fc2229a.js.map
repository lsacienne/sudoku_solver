{"version":3,"file":"js/app.9fc2229a.js","mappings":"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","sources":["webpack://sudoku-v-online/./src/App.vue?8d21","webpack://sudoku-v-online/./src/components/EfficientAI.vue?3ae9","webpack://sudoku-v-online/./src/components/SudokuGrid.vue?ca7d","webpack://sudoku-v-online/./src/components/store.ts","webpack://sudoku-v-online/./src/components/SudokuGrid.vue?77ab","webpack://sudoku-v-online/./src/components/SudokuGrid.vue","webpack://sudoku-v-online/./src/local_modules/ai.ts","webpack://sudoku-v-online/./src/local_modules/structures.ts","webpack://sudoku-v-online/./src/local_modules/analyze_grid.ts","webpack://sudoku-v-online/./src/components/EfficientAI.vue?1716","webpack://sudoku-v-online/./src/components/EfficientAI.vue","webpack://sudoku-v-online/./src/App.vue?847a","webpack://sudoku-v-online/./src/App.vue","webpack://sudoku-v-online/./src/main.ts","webpack://sudoku-v-online/webpack/bootstrap","webpack://sudoku-v-online/webpack/runtime/chunk loaded","webpack://sudoku-v-online/webpack/runtime/compat get default export","webpack://sudoku-v-online/webpack/runtime/define property getters","webpack://sudoku-v-online/webpack/runtime/global","webpack://sudoku-v-online/webpack/runtime/hasOwnProperty shorthand","webpack://sudoku-v-online/webpack/runtime/jsonp chunk loading","webpack://sudoku-v-online/webpack/startup"],"sourcesContent":["import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-49d44e40\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Sudoku solver\", -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_EfficientAI = _resolveComponent(\"EfficientAI\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _hoisted_1,\n    _createVNode(_component_EfficientAI)\n  ], 64))\n}","import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\nimport _imports_0 from '@/assets/rolling-arrows.png'\n\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-25735cd4\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"efficient-ai\" }\nconst _hoisted_2 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"rotating-widget\" }, [\n  /*#__PURE__*/_createElementVNode(\"img\", {\n    src: _imports_0,\n    alt: \"loading\",\n    srcset: \"\"\n  })\n], -1))\nconst _hoisted_3 = [\n  _hoisted_2\n]\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_SudokuGrid = _resolveComponent(\"SudokuGrid\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createVNode(_component_SudokuGrid, { refs: \"sudokuGrid\" }),\n    _createElementVNode(\"button\", {\n      type: \"button\",\n      onClick: _cache[0] || (_cache[0] = \n//@ts-ignore\n(...args) => (_ctx.startAI && _ctx.startAI(...args))),\n      class: \"validate\"\n    }, \"Solve the sudoku!\"),\n    _createElementVNode(\"div\", {\n      class: _normalizeClass([\"loading-screen\", { hidden: !_ctx.isScreenLoading }]),\n      refs: \"loadingScreen\"\n    }, _hoisted_3, 2)\n  ]))\n}","import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-5f555b4c\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"grid-container\" }\nconst _hoisted_2 = [\"name\", \"id\", \"value\", \"onInput\"]\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.store.cells, (cell) => {\n      return (_openBlock(), _createElementBlock(\"div\", {\n        class: _normalizeClass([\"cell\", { grey: _ctx.isGreyBackground(cell) }]),\n        key: cell.index\n      }, [\n        _createElementVNode(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"9\",\n          name: cell.index.toString(),\n          id: cell.index.toString(),\n          value: cell.value,\n          onInput: ($event: any) => {cell.value = (_ctx.checkInput($event.target!.value) ? $event.target!.value : cell.value); cell.value = cell.value; _ctx.updateCellType(cell)},\n          class: _normalizeClass({ wrongvalue: cell.isWrongValue, computedvalue: _ctx.isComputedValue(cell) })\n        }, null, 42, _hoisted_2)\n      ], 2))\n    }), 128))\n  ]))\n}","// store.js\nimport { reactive } from 'vue'\n\nexport declare interface GraphicCell {\n    index: number,\n    value: number | \"\",\n    type: CellType,\n    isWrongValue: boolean\n}\n\nexport enum CellType {\n    HARDCODED,\n    COMPUTED,\n    EMPTY\n}\n\nexport const store = reactive({\n    cells: new Array<GraphicCell>()\n})","\nimport { defineComponent } from 'vue';\nimport { CellType, GraphicCell, store } from '@/components/store'\n\nexport default defineComponent({\n    name: 'SudokuGrid',\n    data() {\n        return {\n            store\n        }\n    },\n    created() {\n        for (let i = 0; i <= 80; ++i) {\n            let newCell: GraphicCell = {\n                index: i,\n                value: \"\",\n                type: CellType.EMPTY,\n                isWrongValue: false\n\n            }\n            store.cells.push(newCell);\n        }\n    },\n    methods: {\n        checkInput(input: number | \"\") {\n            //console.log(input);\n            if (input === \"\") {\n                return true;\n            }\n            if (input < 1 || input > 9) {\n                return false;\n            }\n            return true;\n        },\n        updateCellType(cell: GraphicCell) {\n            if (cell.value === null) {\n                cell.type = CellType.EMPTY;\n            } else {\n                cell.type = CellType.HARDCODED;\n            }\n        },\n        isComputedValue(cell: GraphicCell) {\n            return cell.type === CellType.COMPUTED;\n        },\n        isGreyBackground(cell: GraphicCell) {\n            const linId = Math.floor(cell.index / 9);\n            const colId = cell.index % 9;\n            const squId = Math.floor(colId / 3) + 3 * Math.floor(linId / 3);\n            if (squId % 2 === 0) {\n                return false;\n            }\n            return true;\n        }\n    }\n});\n","import { render } from \"./SudokuGrid.vue?vue&type=template&id=5f555b4c&scoped=true&ts=true\"\nimport script from \"./SudokuGrid.vue?vue&type=script&lang=ts\"\nexport * from \"./SudokuGrid.vue?vue&type=script&lang=ts\"\n\nimport \"./SudokuGrid.vue?vue&type=style&index=0&id=5f555b4c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5f555b4c\"]])\n\nexport default __exports__","import { Problem } from \"./structures\";\n\nexport function generateAndTest(problem: Problem): null | Problem {\n    if (!problem.isComplete()) {\n        const cellIndex = problem.findFirstEmptyCell();\n        if (cellIndex === undefined) {\n            throw new Error(\"The problem is already complete !\");\n        }\n        for (let i = 1; i <= 9; ++i) {\n            const newPb = problem.copy();\n            newPb.setValue(cellIndex, i);\n            if (newPb.isCorrect(cellIndex)) {\n                const res = generateAndTest(newPb);\n                if (res) {\n                    return res;\n                }\n            }\n        }\n        return null;\n    } else {\n        return problem;\n    }\n}\n\nexport function generateAndTest2(problem: Problem, cellIndex: number | undefined): null | Problem {\n    if (!problem.isComplete()) {\n        if (cellIndex === undefined) {\n            throw new Error(\"The problem is already complete !\");\n        }\n        for (let i = 1; i <= 9; ++i) {\n            const newPb = problem.copy();\n            newPb.setValue(cellIndex, i);\n            if (newPb.isCorrect(cellIndex)) {\n                newPb.localUpdateScore(cellIndex);\n                const nextCell = newPb.findMostConstraints();\n                const res = generateAndTest2(newPb, nextCell);\n                if (res) {\n                    return res;\n                }\n            }\n        }\n        return null;\n    } else {\n        return problem;\n    }\n}","/* eslint-disable @typescript-eslint/no-extra-non-null-assertion */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nexport class Cell {\n    value: number | null;\n    readonly index: number;\n    score: number | null;\n\n    constructor(value: null | number, index: number) {\n        this.value = value;\n        this.index = index;\n        if (this.value === null)\n            this.score = 0;\n        else\n            this.score = null;\n    }\n\n    computeCol(): number {\n        return this.index % 9;\n    }\n\n    computeLine(): number {\n        return Math.floor(this.index / 9);\n    }\n\n    computeSquare(): number {\n        return Math.floor(this.computeCol() / 3) + 3 * Math.floor(this.computeLine() / 3);\n    }\n\n    setValue(value: number) {\n        this.value = value;\n    }\n\n    setScore(score: number | null): number | null {\n        this.score = score;\n        return this.score;\n    }\n\n    copy() {\n        return new Cell(this.value, this.index);\n    }\n}\n\nclass CellStructure {\n    index: number;\n    cells: Array<Cell>;\n\n    constructor(index: number) {\n        this.index = index;\n        this.cells = [];\n    }\n\n    addCell(cell: Cell) {\n        this.cells.push(cell);\n    }\n}\n\nclass C extends CellStructure { }\nclass L extends CellStructure { }\nclass S extends CellStructure { }\n\nexport class Problem {\n    cols: Array<C>;\n    lins: Array<L>;\n    squs: Array<S>;\n    cells: Array<Cell>;\n\n    constructor() {\n        this.cols = [];\n        for (let i = 0; i < 9; ++i) {\n            this.cols.push(new C(i));\n        }\n        this.lins = [];\n        for (let i = 0; i < 9; ++i) {\n            this.lins.push(new L(i));\n        }\n        this.squs = [];\n        for (let i = 0; i < 9; ++i) {\n            this.squs.push(new S(i));\n        }\n        this.cells = [];\n    }\n\n    putCellInCol(cell: Cell) {\n        const colId = cell.computeCol();\n        this.cols.find(col => col.index === colId)?.addCell(cell);\n    }\n\n    putCellInLin(cell: Cell) {\n        const linId = cell.computeLine();\n        this.lins.find(lin => lin.index === linId)?.addCell(cell);\n    }\n\n    putCellInSqu(cell: Cell) {\n        const squId = cell.computeSquare();\n        this.squs.find(squ => squ.index === squId)?.addCell(cell);\n    }\n\n    addCell(cell: Cell) {\n        this.cells.push(cell);\n        this.putCellInCol(cell);\n        this.putCellInLin(cell);\n        this.putCellInSqu(cell);\n    }\n\n    printProblem() {\n        const lines = this.lins.map(lin => lin.cells.map(cell => cell.value));\n        console.log(lines);\n    }\n\n    printDenseSolution() {\n        const out = this.lins.map(lin => lin.cells.map(cell => cell.value?.toString()).join(' ')).join('\\n');\n        console.log(out);\n    }\n\n    getArrayOfValues() {\n        const out = this.lins\n            .map(lin => lin.cells.map(cell => cell.value === null ? \"\" : cell.value))\n            .reduce((acc, cur) => acc.concat(cur), []);\n        return out;\n    }\n\n    setValue(index: number, value: number) {\n        if (this.cells[index].value !== null) {\n            throw new Error(\"The cell is already filled\");\n        }\n        this.cells[index].setValue(value);\n    }\n\n    /* Copy */\n    copy(): Problem {\n        const newProblem = new Problem();\n        this.cells.forEach(\n            function (cell) {\n                newProblem.addCell(cell.copy());\n            }\n        )\n        return newProblem;\n    }\n\n    /* Constraints */\n    checkLine(index: number, spValue?: number) {\n        const line = this.lins.find(lin => lin.index === index)?.cells.map(cell => cell.value);\n        const valuesCount = this.countValuesArray(line!!);\n        if (spValue !== undefined) {\n            const spValueCount = valuesCount.get(spValue);\n            if (spValueCount !== undefined && spValueCount > 1) {\n                return false;\n            }\n            return true;\n        }\n        if (Array.from(valuesCount.values()).includes(2)) {\n            return false;\n        }\n        return true;\n    }\n\n    checkColumn(index: number, spValue?: number) {\n        const column = this.cols.find(col => col.index === index)?.cells.map(cell => cell.value);\n        const valuesCount = this.countValuesArray(column!!);\n        if (spValue !== undefined) {\n            const spValueCount = valuesCount.get(spValue);\n            if (spValueCount !== undefined && spValueCount > 1) {\n                return false;\n            }\n            return true;\n        }\n        if (Array.from(valuesCount.values()).includes(2)) {\n            return false;\n        }\n        return true;\n    }\n\n    checkSquare(index: number, spValue?: number) {\n        const square = this.squs.find(squ => squ.index === index)?.cells.map(cell => cell.value);\n        const valuesCount = this.countValuesArray(square!!);\n        if (spValue !== undefined) {\n            const spValueCount = valuesCount.get(spValue);\n            if (spValueCount !== undefined && spValueCount > 1) {\n                return false;\n            }\n            return true;\n        }\n        if (Array.from(valuesCount.values()).includes(2)) {\n            return false;\n        }\n        return true;\n    }\n\n    isComplete() {\n        if (this.cells.find(cell => cell.value === null)) {\n            return false;\n        }\n        return true;\n    }\n\n    isCorrect(cellId: number) {\n        //const cell = this.cells.find(cel => cel.index === cellId);\n        const linId = Math.floor(cellId / 9);\n        const colId = cellId % 9;\n        const squId = Math.floor(colId / 3) + 3 * Math.floor(linId / 3);\n\n        //console.log(cell?.index, cell?.value);\n        //console.log(this.checkLine(linId));\n        //console.log(this.checkColumn(colId));\n        //console.log(this.checkSquare(squId));\n\n        if (this.checkLine(linId) && this.checkColumn(colId) && this.checkSquare(squId)) {\n            return true;\n        }\n        return false;\n    }\n\n    checkCellIsCorrect(cellId: number, cellValue: number) {\n        const linId = Math.floor(cellId / 9);\n        const colId = cellId % 9;\n        const squId = Math.floor(colId / 3) + 3 * Math.floor(linId / 3);\n\n        if (this.checkLine(linId, cellValue) && this.checkColumn(colId, cellValue) && this.checkSquare(squId, cellValue)) {\n            return true;\n        }\n        return false;\n    }\n\n    isCompletelyCorrect(): number[] {\n        const incorrectCells: number[] = [];\n        for (const cell of this.cells) {\n            if (cell.value !== null && !this.checkCellIsCorrect(cell.index, cell.value)) {\n                incorrectCells.push(cell.index);\n            }\n        }\n        return incorrectCells;\n    }\n\n    countValuesArray(arr: Array<(number | null)>): Map<number, number> {\n        const counts: Map<number, number> = new Map();\n        arr.forEach(\n            function (x) {\n                if (x !== null) {\n                    const val = counts.get(x);\n                    if (val !== undefined) {\n                        counts.set(x, val + 1);\n                    } else {\n                        counts.set(x, 1);\n                    }\n                }\n            }\n        );\n\n        return counts;\n    }\n\n    /* Heuristics */\n    findFirstEmptyCell(): number | undefined {\n        return this.cells.find(cell => cell.value === null)?.index;\n    }\n\n    getSetLin(linIndex: number): Set<number | null> {\n        const line = this.lins.find(lin => lin.index === linIndex)?.cells.map(cell => cell.value);\n        return new Set(line);\n    }\n\n    getSetCol(colIndex: number): Set<number | null> {\n        const column = this.cols.find(col => col.index === colIndex)?.cells.map(cell => cell.value);\n        return new Set(column);\n    }\n\n    getSetSqu(squIndex: number): Set<number | null> {\n        const square = this.squs.find(squ => squ.index === squIndex)?.cells.map(cell => cell.value);\n        return new Set(square);\n    }\n\n    getCellScore(cellId: number): number | null {\n        const cell = this.cells.find(cel => cel.index === cellId);\n        if (cell?.value !== null) {\n            cell?.setScore(null);\n            return null;\n        }\n        const linId = Math.floor(cellId / 9);\n        const colId = cellId % 9;\n        const squId = Math.floor(colId / 3) + 3 * Math.floor(linId / 3);\n\n        const scoreSet = new Set([...this.getSetLin(linId), ...this.getSetCol(colId), ...this.getSetSqu(squId)]);\n        return cell.setScore(scoreSet.size);\n    }\n\n    globalUpdateScore(): number | undefined {\n        let max = -1;\n        let curScore: number | null;\n        let indexMax: number | null = null;\n        for (const cell of this.cells) {\n            curScore = this.getCellScore(cell.index);\n            if (curScore !== null && curScore > max) {\n                max = curScore;\n                indexMax = cell.index;\n            }\n        }\n        return indexMax === null ? undefined : indexMax;\n    }\n\n    localUpdateScore(cellId: number) {\n        const linId = Math.floor(cellId / 9);\n        const colId = cellId % 9;\n        const squId = Math.floor(colId / 3) + 3 * Math.floor(linId / 3);\n\n        const line = this.lins.find(lin => lin.index === linId);\n        const column = this.cols.find(col => col.index === colId);\n        const square = this.squs.find(squ => squ.index === squId);\n\n        const toCompute = [...line!!.cells, ...column!!.cells, ...square!!.cells];\n\n        for (const cell of toCompute) {\n            this.getCellScore(cell.index);\n        }\n    }\n\n    findMostConstraints(): number | undefined {\n        let max = -1;\n        let curScore: number | null;\n        let indexMax: number | null = null;\n\n        for (const cell of this.cells) {\n            curScore = cell.score;\n            if (curScore !== null && curScore > max) {\n                max = curScore;\n                indexMax = cell.index;\n            }\n        }\n\n        return indexMax === null ? undefined : indexMax;\n    }\n}\n","import { Problem, Cell } from \"./structures\";\n\nexport function analyzeGrid(input: string): Array<string> {\n    const lines = input.split('\\n');\n    const stringCells = lines\n        .map(\n            line => line.split(' ')\n        ).reduce((acc, cur) => acc.concat(cur), []);\n    return stringCells;\n}\n\nexport function fillGrid(input: Array<string>): Problem {\n    const problem = new Problem();\n    let index = 0;\n    for (const cell of input) {\n        const convertedCellValue: number | null = isNaN(+cell) || !(+cell > 0 && +cell <= 9) ? null : +cell;\n        problem.addCell(new Cell(convertedCellValue, index));\n        index++;\n    }\n    return problem;\n}","\nimport SudokuGrid from '@/components/SudokuGrid.vue';\nimport { defineComponent } from 'vue';\nimport * as ai from '@/local_modules/ai';\nimport { Problem } from '@/local_modules/structures';\nimport { fillGrid } from '@/local_modules/analyze_grid';\nimport { CellType, store } from './store';\n\nexport default defineComponent({\n    name: 'FirstAI',\n    data() {\n        return {\n            isScreenLoading: false\n        }\n    },\n    components: {\n        SudokuGrid\n    },\n    methods: {\n\n        async runAI(inputProblem: Problem) {\n            //problem.printDenseSolution();\n            let toResolve = new Promise<Problem>((resolve, reject) => {\n                const firstCell = inputProblem.globalUpdateScore();\n                const solution: Problem | null = ai.generateAndTest2(inputProblem, firstCell);\n                if (solution) {\n                    resolve(solution);\n                } else {\n                    reject(\"No solution found\");\n                }\n            });\n            return toResolve;\n        },\n        startAI() {\n            this.isScreenLoading = true;\n            let gridContent = store.cells.map(cell => cell.value === \"\" ? \"0\" : cell.value.toString());\n            const problem: Problem = fillGrid(gridContent);\n            const wrongCells = problem.isCompletelyCorrect();\n            if (wrongCells.length > 0) {\n                this.highlightWrongCells(wrongCells);\n                this.isScreenLoading = false;\n            } else {\n                let promise = this.runAI(problem);\n                promise.then((solution) => {\n                    solution.printDenseSolution();\n                    this.fillCells(solution.getArrayOfValues());\n                    this.isScreenLoading = false;\n                });\n                promise.catch((e) => console.error(e));\n            }\n\n        },\n        highlightWrongCells(wrongCellsIndex: Array<number>) {\n            for (const cell of store.cells) {\n                if (cell.index in wrongCellsIndex) {\n                    cell.isWrongValue = true;\n                } else {\n                    cell.isWrongValue = false;\n                }\n            }\n        },\n        fillCells(input: Array<number | \"\">) {\n            for (let i = 0; i <= 80; ++i) {\n                store.cells[i] = {\n                    index: i,\n                    value: input[i],\n                    type: store.cells[i].type === CellType.EMPTY ? CellType.COMPUTED : CellType.HARDCODED,\n                    isWrongValue: false\n                }\n            }\n        }\n    }\n});\n","import { render } from \"./EfficientAI.vue?vue&type=template&id=25735cd4&scoped=true&ts=true\"\nimport script from \"./EfficientAI.vue?vue&type=script&lang=ts\"\nexport * from \"./EfficientAI.vue?vue&type=script&lang=ts\"\n\nimport \"./EfficientAI.vue?vue&type=style&index=0&id=25735cd4&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-25735cd4\"]])\n\nexport default __exports__","\nimport { defineComponent } from 'vue';\nimport FirstAI from '@/components/FirstAI.vue';\nimport EfficientAI from './components/EfficientAI.vue';\n\nexport default defineComponent({\n    name: 'App',\n    components: {\n        //FirstAI,\n        EfficientAI\n    }\n});\n","import { render } from \"./App.vue?vue&type=template&id=49d44e40&scoped=true&ts=true\"\nimport script from \"./App.vue?vue&type=script&lang=ts\"\nexport * from \"./App.vue?vue&type=script&lang=ts\"\n\nimport \"./App.vue?vue&type=style&index=0&id=49d44e40&lang=css\"\nimport \"./App.vue?vue&type=style&index=1&id=49d44e40&scoped=true&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-49d44e40\"]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksudoku_v_online\"] = self[\"webpackChunksudoku_v_online\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(3208); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_createElementVNode","render","_ctx","_cache","$props","$setup","$data","$options","_component_EfficientAI","_resolveComponent","_openBlock","_createElementBlock","_Fragment","_createVNode","class","_hoisted_2","src","_imports_0","alt","srcset","_hoisted_3","_component_SudokuGrid","refs","type","onClick","args","startAI","_normalizeClass","hidden","isScreenLoading","_renderList","store","cells","cell","grey","isGreyBackground","key","index","min","max","name","toString","id","value","onInput","$event","checkInput","target","updateCellType","wrongvalue","isWrongValue","computedvalue","isComputedValue","CellType","reactive","Array","defineComponent","data","created","i","newCell","EMPTY","push","methods","input","HARDCODED","COMPUTED","linId","Math","floor","colId","squId","__exports__","generateAndTest2","problem","cellIndex","isComplete","undefined","Error","newPb","copy","setValue","isCorrect","localUpdateScore","nextCell","findMostConstraints","res","Cell","constructor","_defineProperty","this","score","computeCol","computeLine","computeSquare","setScore","CellStructure","addCell","C","L","S","Problem","cols","lins","squs","putCellInCol","find","col","putCellInLin","lin","putCellInSqu","squ","printProblem","lines","map","console","log","printDenseSolution","out","join","getArrayOfValues","reduce","acc","cur","concat","newProblem","forEach","checkLine","spValue","line","valuesCount","countValuesArray","spValueCount","get","from","values","includes","checkColumn","column","checkSquare","square","cellId","checkCellIsCorrect","cellValue","isCompletelyCorrect","incorrectCells","arr","counts","Map","x","val","set","findFirstEmptyCell","getSetLin","linIndex","Set","getSetCol","colIndex","getSetSqu","squIndex","getCellScore","cel","scoreSet","size","globalUpdateScore","curScore","indexMax","toCompute","fillGrid","convertedCellValue","isNaN","components","SudokuGrid","async","inputProblem","toResolve","Promise","resolve","reject","firstCell","solution","ai","gridContent","wrongCells","length","highlightWrongCells","promise","runAI","then","fillCells","catch","e","error","wrongCellsIndex","EfficientAI","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","splice","r","getter","__esModule","d","a","definition","o","defineProperty","enumerable","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}